package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Todo represents a row from 'todo.todos'.
type Todo struct {
	ID      uint64    `json:"id"`      // id
	UserID  uint64    `json:"user_id"` // user_id
	Title   string    `json:"title"`   // title
	Status  string    `json:"status"`  // status
	Created *time.Time `json:"created"` // created
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the Todo exists in the database.
func (t *Todo) Exists() bool {
	return t._exists
}

// Deleted returns true when the Todo has been marked for deletion from
// the database.
func (t *Todo) Deleted() bool {
	return t._deleted
}

// Insert inserts the Todo to the database.
func (t *Todo) Insert(ctx context.Context, db DB) error {
	switch {
	case t._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case t._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (primary key generated and returned by database)
	const sqlstr = `INSERT INTO todo.todos (` +
		`user_id, title, status, created` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`
	// run
	logf(sqlstr, t.UserID, t.Title, t.Status, t.Created)
	res, err := db.ExecContext(ctx, sqlstr, t.UserID, t.Title, t.Status, t.Created)
	if err != nil {
		return logerror(err)
	}
	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return logerror(err)
	} // set primary key
	t.ID = uint64(id)
	// set exists
	t._exists = true
	return nil
}

// Update updates a Todo in the database.
func (t *Todo) Update(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case t._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with primary key
	const sqlstr = `UPDATE todo.todos SET ` +
		`user_id = ?, title = ?, status = ?, created = ? ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, t.UserID, t.Title, t.Status, t.Created, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.UserID, t.Title, t.Status, t.Created, t.ID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the Todo to the database.
func (t *Todo) Save(ctx context.Context, db DB) error {
	if t.Exists() {
		return t.Update(ctx, db)
	}
	return t.Insert(ctx, db)
}

// Upsert performs an upsert for Todo.
func (t *Todo) Upsert(ctx context.Context, db DB) error {
	switch {
	case t._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO todo.todos (` +
		`id, user_id, title, status, created` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)` +
		` ON DUPLICATE KEY UPDATE ` +
		`user_id = VALUES(user_id), title = VALUES(title), status = VALUES(status), created = VALUES(created)`
	// run
	logf(sqlstr, t.ID, t.UserID, t.Title, t.Status, t.Created)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID, t.UserID, t.Title, t.Status, t.Created); err != nil {
		return logerror(err)
	}
	// set exists
	t._exists = true
	return nil
}

// Delete deletes the Todo from the database.
func (t *Todo) Delete(ctx context.Context, db DB) error {
	switch {
	case !t._exists: // doesn't exist
		return nil
	case t._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM todo.todos ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, t.ID)
	if _, err := db.ExecContext(ctx, sqlstr, t.ID); err != nil {
		return logerror(err)
	}
	// set deleted
	t._deleted = true
	return nil
}

// TodosByUserID retrieves a row from 'todo.todos' as a Todo.
//
// Generated from index 'fk_user_id'.
func TodosByUserID(ctx context.Context, db DB, userID uint64) ([]*Todo, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, title, status, created ` +
		`FROM todos ` +
		`WHERE user_id = ?`
	// run
	logf(sqlstr, userID)
	rows, err := db.QueryContext(ctx, sqlstr, userID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Todo
	for rows.Next() {
		t := Todo{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&t.ID, &t.UserID, &t.Title, &t.Status, &t.Created); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &t)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// TodoByID retrieves a row from 'todo.todos' as a Todo.
//
// Generated from index 'todos_id_pkey'.
func TodoByID(ctx context.Context, db DB, id uint64) (*Todo, error) {
	// query
	const sqlstr = `SELECT ` +
		`id, user_id, title, status, created ` +
		`FROM todo.todos ` +
		`WHERE id = ?`
	// run
	logf(sqlstr, id)
	t := Todo{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, id).Scan(&t.ID, &t.UserID, &t.Title, &t.Status, &t.Created); err != nil {
		return nil, logerror(err)
	}
	return &t, nil
}

// User returns the User associated with the Todo's (UserID).
//
// Generated from foreign key 'fk_user_id'.
func (t *Todo) User(ctx context.Context, db DB) (*User, error) {
	return UserByID(ctx, db, t.UserID)
}
